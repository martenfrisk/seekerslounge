{"version":3,"sources":["assets/transcribeDemo/mini-52-edit.mp3","components/transcribe/select-stt-json-type.jsx","components/transcribe/select-export-format.jsx","components/Transcribe.jsx","components/transcribe/local-storage.jsx"],"names":["module","exports","SttTypeSelect","props","className","name","value","onChange","handleChange","disabled","ExportFormatSelect","Transcribe","loadDemo","setState","transcriptData","DEMO_TRANSCRIPT","mediaUrl","DEMO_MEDIA_URL","title","sttType","handleLoadMedia","files","file","document","createElement","canPlayType","type","fileURL","URL","createObjectURL","fileName","alert","handleLoadMediaUrl","prompt","handleLoadTranscriptURL","fetch","then","res","json","data","handleLoadTranscriptList","event","target","JSON","parse","handleLoadTranscriptJson","fileReader","FileReader","onload","result","readAsText","handleIsTextEditable","e","isTextEditable","checked","handleSpellCheck","spellCheck","handleTranscriptLoad","console","log","transcriptLoad","state","handleSttTypeChange","handleExportFormatChange","exportTranscript","transcriptEditorRef","current","getEditorContent","exportFormat","ext","tmpData","stringify","download","content","filename","contentType","link","blob","Blob","href","window","body","appendChild","click","removeChild","clearLocalStorage","localStorage","clear","info","handleAnalyticsEvents","analyticsEvents","handleChangeTranscriptTitle","newTitle","handleChangeTranscriptName","handleAutoSaveChanges","newAutoSaveData","autoSaveData","autoSaveExtension","mediaUrlName","includes","setItem","localSave","autoSaveContentType","React","createRef","rel","onClick","htmlFor","id","this","isEditable","sttJsonType","ref","mediaType","style","height","width","float","Component"],"mappings":"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","file":"static/js/5.e482ad84.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mini-52-edit.bbabccab.mp3\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SttTypeSelect = props => {\r\n  return <select className={ props.className } name={ props.name } value={ props.value } onChange={ props.handleChange }>\r\n    <option value=\"amazontranscribe\">Amazon Transcribe</option>\r\n    <option value=\"bbckaldi\">BBC Kaldi</option>\r\n    <option value=\"draftjs\">Draft Js</option>\r\n    <option value=\"gentle-transcript\" disabled>Gentle Transcript</option>\r\n    <option value=\"gentle-alignement\" disabled>Gentle Alignement</option>\r\n    <option value=\"autoedit2\">autoEdit 2</option>\r\n    <option value=\"speechmatics\">Speechmatics</option>\r\n    <option value=\"ibm\">IBM Watson STT</option>\r\n    <option value=\"digitalpaperedit\">Digital Paper Edit</option>\r\n    <option value=\"google-stt\">Google STT</option>\r\n  </select>;\r\n};\r\n\r\nSttTypeSelect.propTypes = {\r\n  className: PropTypes.string,\r\n  name: PropTypes.string,\r\n  value: PropTypes.string,\r\n  handleChange: PropTypes.func\r\n};\r\n\r\nexport default SttTypeSelect;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ExportFormatSelect = props => {\r\n  return <select className={ props.className } name={ props.name } value={ props.value } onChange={ props.handleChange }>\r\n    <option value=\"txtspeakertimecodes\">Text file - with Speakers and Timecodes</option>\r\n    <option value=\"draftjs\">Draft Js</option>\r\n    <option value=\"txt\">Text file</option>\r\n    <option value=\"digitalpaperedit\">Digital Paper Edit</option>\r\n    <option value=\"srt\">Srt - Captions</option>\r\n    <option value=\"ttml\">TTML - Captions</option>\r\n    <option value=\"premiereTTML\">TTML for Adobe Premiere - Captions</option>\r\n    <option value=\"itt\">iTT - Captions</option>\r\n    <option value=\"csv\">CSV - Captions</option>\r\n    <option value=\"vtt\">VTT - Captions</option>\r\n    <option value=\"pre-segment-txt\">Pre-segment-txt - Captions</option>\r\n    <option value=\"docx\">MS Word</option>\r\n    <option value=\"json-captions\">Json - Captions</option>\r\n  </select>;\r\n};\r\n\r\nExportFormatSelect.propTypes = {\r\n  className: PropTypes.string,\r\n  name: PropTypes.string,\r\n  value: PropTypes.string,\r\n  handleChange: PropTypes.func\r\n};\r\n\r\nexport default ExportFormatSelect;","import React from 'react'\r\nimport TranscriptEditor from '@bbc/react-transcript-editor'\r\nimport SttTypeSelect from './transcribe/select-stt-json-type'\r\nimport ExportFormatSelect from './transcribe/select-export-format'\r\nimport {\r\n\t// loadLocalSavedData,\r\n\t// isPresentInLocalStorage,\r\n\tlocalSave\r\n} from './transcribe/local-storage'\r\nimport DEMO_TRANSCRIPT from '../assets/transcribeDemo/mini-52.json'\r\nimport DEMO_MEDIA_URL from '../assets/transcribeDemo/mini-52-edit.mp3'\r\n\r\n\r\nconst DEMO_TITLE = 'Mini-52 - Post-game Conference Pt. 2'\r\n\r\nclass Transcribe extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tthis.state = {\r\n\t\t\ttranscriptData: null,\r\n\t\t\tmediaUrl: null,\r\n\t\t\tisTextEditable: true,\r\n\t\t\tspellCheck: false,\r\n\t\t\tsttType: 'amazontranscribe',\r\n\t\t\tanalyticsEvents: [],\r\n\t\t\ttitle: '',\r\n\t\t\tfileName: '',\r\n\t\t\tautoSaveData: {},\r\n\t\t\tautoSaveContentType: 'amazontranscribe',\r\n\t\t\tautoSaveExtension: 'json',\r\n\t\t\ttranscriptLoad: {}\r\n\t\t}\r\n\r\n\t\tthis.transcriptEditorRef = React.createRef()\r\n\t}\r\n\r\n\tloadDemo = () => {\r\n\t\t// if (isPresentInLocalStorage(DEMO_MEDIA_URL)) {\r\n\t\t// \tconst transcriptDataFromLocalStorage = loadLocalSavedData(DEMO_MEDIA_URL)\r\n\t\t// \tthis.setState({\r\n\t\t// \t\ttranscriptData: transcriptDataFromLocalStorage,\r\n\t\t// \t\tmediaUrl: DEMO_MEDIA_URL,\r\n\t\t// \t\ttitle: DEMO_TITLE,\r\n\t\t// \t\tsttType: 'amazontranscribe'\r\n\t\t// \t})\r\n\t\t// } else {\r\n\t\tthis.setState({\r\n\t\t\ttranscriptData: DEMO_TRANSCRIPT,\r\n\t\t\tmediaUrl: DEMO_MEDIA_URL,\r\n\t\t\ttitle: DEMO_TITLE,\r\n\t\t\tsttType: 'amazontranscribe'\r\n\t\t})\r\n\t\t// }\r\n\t}\r\n\r\n\t// https://stackoverflow.com/questions/8885701/play-local-hard-drive-video-file-with-html5-video-tag\r\n\thandleLoadMedia = (files) => {\r\n\t\tconst file = files[0]\r\n\t\tconst videoNode = document.createElement('video')\r\n\t\tconst canPlay = videoNode.canPlayType(file.type)\r\n\r\n\t\tif (canPlay) {\r\n\t\t\tconst fileURL = URL.createObjectURL(file)\r\n\t\t\tthis.setState({\r\n\t\t\t\t// transcriptData: DEMO_TRANSCRIPT,\r\n\t\t\t\tmediaUrl: fileURL,\r\n\t\t\t\tfileName: file.name\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\talert('Select a valid audio or video file.')\r\n\t\t}\r\n\t}\r\n\r\n\thandleLoadMediaUrl = () => {\r\n\t\tconst fileURL = prompt(\"Paste the URL you'd like to use here:\")\r\n    \r\n\t\tthis.setState({\r\n      // transcriptData: DEMO_TRANSCRIPT,\r\n\t\t\tmediaUrl: fileURL\r\n\t\t})\r\n\t}\r\n  \r\n\thandleLoadTranscriptURL = () => {\r\n    const fileURL = prompt(\"Enter filename followed by .json (i.e. s01e02.json)\")\r\n    const file = \"https://raw.githubusercontent.com/martenfrisk/seekerslounge/master/src/transcriptsAWS/\" + fileURL + \".json\"\r\n    fetch(file)\r\n      .then(res => res.json())\r\n      .then(data => this.setState({ transcriptData: data }))\r\n\r\n    // this.setState({\r\n    //   transcriptData: fileURL\r\n    // })\r\n\t\t// if (fileURL.type === 'application/json') {\r\n\t\t// \tconst fileReader = new FileReader()\r\n\r\n\t\t// \tfileReader.onload = (event) => {\r\n\t\t// \t\tthis.setState({\r\n\t\t// \t\t\ttranscriptData: JSON.parse(event.target.result)\r\n\t\t// \t\t})\r\n\t\t// \t}\r\n\r\n\t\t// \tfileReader.readAsText(fileURL)\r\n\t\t// } else {\r\n\t\t// \talert('Select a valid JSON file.')\r\n\t\t// }\r\n\t}\r\n\thandleLoadTranscriptList = (event) => {\r\n    let file = event.target.value\r\n    // fetch(file)\r\n    //   .then(res => res.json())\r\n    //   .then(data => this.setState({ transcriptData: data }))\r\n      this.setState({\r\n        transcriptData: JSON.parse(file)\r\n      })\r\n\r\n\t}\r\n\thandleLoadTranscriptJson = (files) => {\r\n\t\tconst file = files[0]\r\n\r\n\t\tif (file.type === 'application/json') {\r\n\t\t\tconst fileReader = new FileReader()\r\n\r\n\t\t\tfileReader.onload = (event) => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\ttranscriptData: JSON.parse(event.target.result)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tfileReader.readAsText(file)\r\n\t\t} else {\r\n\t\t\talert('Select a valid JSON file.')\r\n\t\t}\r\n\t}\r\n\r\n\thandleIsTextEditable = (e) => {\r\n\t\tthis.setState({\r\n\t\t\tisTextEditable: e.target.checked\r\n\t\t})\r\n\t}\r\n\r\n\thandleSpellCheck = (e) => {\r\n\t\tthis.setState({\r\n\t\t\tspellCheck: e.target.checked\r\n\t\t})\r\n\t}\r\n\r\n\thandleTranscriptLoad = (event) => {\r\n\t\tconsole.log(event)\r\n\t\tthis.setState({\r\n\t\t\ttranscriptLoad: event.target.value\r\n\t\t})\r\n\t\tconsole.log(this.state.transcriptLoad)\r\n\t}\r\n\r\n\t// https://stackoverflow.com/questions/21733847/react-jsx-selecting-selected-on-selected-select-option\r\n\thandleSttTypeChange = (event) => {\r\n\t\tthis.setState({ [event.target.name]: event.target.value })\r\n\t}\r\n\r\n\thandleExportFormatChange = (event) => {\r\n\t\tconsole.log(event.target.name, event.target.value)\r\n\t\tthis.setState({ [event.target.name]: event.target.value })\r\n\t}\r\n\r\n\texportTranscript = () => {\r\n\t\t// console.log('export')\r\n\t\t// eslint-disable-next-line react/no-string-refs\r\n\t\tconst { data, ext } = this.transcriptEditorRef.current.getEditorContent(this.state.exportFormat)\r\n\t\tlet tmpData = data\r\n\t\tif (ext === 'json') {\r\n\t\t\ttmpData = JSON.stringify(data, null, 2)\r\n\t\t}\r\n\t\tif (ext !== 'docx') {\r\n\t\t\tthis.download(tmpData, `${this.state.mediaUrl}.${ext}`)\r\n\t\t}\r\n\t}\r\n\r\n\t// https://stackoverflow.com/questions/2897619/using-html5-javascript-to-generate-and-save-a-file\r\n\tdownload = (content, filename, contentType) => {\r\n\t\tconsole.log('download')\r\n\t\tconst type = contentType || 'application/octet-stream'\r\n\t\tconst link = document.createElement('a')\r\n\t\tconst blob = new Blob([ content ], { type: type })\r\n\r\n\t\tlink.href = window.URL.createObjectURL(blob)\r\n\t\tlink.download = filename\r\n\t\t// Firefox fix - cannot do link.click() if it's not attached to DOM in firefox\r\n\t\t// https://stackoverflow.com/questions/32225904/programmatical-click-on-a-tag-not-working-in-firefox\r\n\t\tdocument.body.appendChild(link)\r\n\t\tlink.click()\r\n\t\tdocument.body.removeChild(link)\r\n\t}\r\n\r\n\tclearLocalStorage = () => {\r\n\t\tlocalStorage.clear()\r\n\t\tconsole.info('Cleared local storage.')\r\n\t}\r\n\r\n\thandleAnalyticsEvents = (event) => {\r\n\t\tthis.setState({ analyticsEvents: [ ...this.state.analyticsEvents, event ] })\r\n\t}\r\n\r\n\thandleChangeTranscriptTitle = (newTitle) => {\r\n\t\tthis.setState({\r\n\t\t\ttitle: newTitle\r\n\t\t})\r\n\t}\r\n\r\n\thandleChangeTranscriptName = (value) => {\r\n\t\tthis.setState({ fileName: value })\r\n\t}\r\n\r\n\thandleAutoSaveChanges = (newAutoSaveData) => {\r\n\t\t// console.log('handleAutoSaveChanges', newAutoSaveData)\r\n\t\tconst { data, ext } = newAutoSaveData\r\n\t\tthis.setState({ autoSaveData: data, autoSaveExtension: ext })\r\n\t\t// Saving to local storage\r\n\t\tlocalSave(this.state.mediaUrl, this.state.fileName, data)\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"px-2\">\r\n\t\t\t\t<div className=\"w-full text-2xl text-center\">Transcript Editor</div>\r\n\t\t\t\t<div className=\"w-full px-10 my-2 border-t border-b border-l-4 border-r border-red-700\">\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tThis is an experimental transcript editor. Code is copied from the demo of{' '}\r\n\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\thref=\"https://github.com/bbc/react-transcript-editor\"\r\n\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tBBC react-transcript-editor\r\n\t\t\t\t\t\t</a>. Only tested with AWS Transcribe transcript files.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tDue to copyright reasons I have not included any audio files. You'll have to provide these\r\n\t\t\t\t\t\tyourself. I'd suggest using the Stitcher RSS feeds and grabbing the URLs directly from the RSS.\r\n\t\t\t\t\t</p>\r\n          <p>\r\n            Prefered export format is 'Text file - with Speakers and Timecode'.\r\n          </p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button onClick={() => this.loadDemo()} className=\"underline\">\r\n\t\t\t\t\tLoad Demo (might take a few seconds to load)\r\n\t\t\t\t</button>\r\n\t\t\t\t<div className=\"flex flex-wrap px-12 py-4\">\r\n\t\t\t\t\t<section className=\"flex flex-wrap w-1/2 pl-4 mb-4 border-l-8 border-blue-600\">\r\n\t\t\t\t\t\t<div className=\"w-full text-xl\">Load Audio</div>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tonClick={() => this.handleLoadMediaUrl()}\r\n\t\t\t\t\t\t\tclassName=\"w-full pl-4 mb-1 text-left underline\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tFrom URL (click me)\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<label className=\"pl-4 mb-1 mr-4\" htmlFor=\"mediaFile\">\r\n\t\t\t\t\t\t\tFrom Computer\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<input type={'file'} id={'mediaFile'} onChange={(e) => this.handleLoadMedia(e.target.files)} />\r\n\t\t\t\t\t\t{this.state.fileName !== '' ? <label>{this.state.fileName}</label> : null}\r\n\t\t\t\t\t</section>\r\n\r\n\t\t\t\t\t<section className=\"flex flex-wrap w-1/2 pl-4 mb-4 border-l-8 border-blue-600\">\r\n\t\t\t\t\t\t<div className=\"w-full text-xl\">Load Transcript</div>\r\n\t\t\t\t\t\t<div className=\"w-full pl-4 mb-1\">Input format\r\n\t\t\t\t\t\t<SttTypeSelect\r\n\t\t\t\t\t\t\tclassName=\"w-1/2 ml-4 border border-gray-500\"\r\n\t\t\t\t\t\t\tname={'sttType'}\r\n\t\t\t\t\t\t\tvalue={this.state.sttType}\r\n\t\t\t\t\t\t\thandleChange={this.handleSttTypeChange}\r\n\t\t\t\t\t\t/>\r\n            </div>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tonClick={() => this.handleLoadTranscriptURL()}\r\n\t\t\t\t\t\t\tclassName=\"w-full pl-4 mb-1 text-left underline\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tEnter episode name (click me)\r\n\t\t\t\t\t\t</button>\r\n            {/* <ImportScripts\r\n              className=\"w-1/2 border border-gray-500\"\r\n\t\t\t\t\t\t\tname={'importScripts'}\r\n\t\t\t\t\t\t\tvalue={this.state.transcriptData}\r\n\t\t\t\t\t\t\thandleChange={this.handleLoadTranscriptList}\r\n              /> */}\r\n\t\t\t\t\t\t<label className=\"pl-4 mb-1 mr-4\" htmlFor=\"transcriptFile\">\r\n\t\t\t\t\t\t\tFrom Computer\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype={'file'}\r\n\t\t\t\t\t\t\tid={'transcriptFile'}\r\n\t\t\t\t\t\t\tonChange={(e) => this.handleLoadTranscriptJson(e.target.files)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{this.state.transcriptData !== null ? <label>Transcript loaded.</label> : null}\r\n\t\t\t\t\t</section>\r\n\r\n\t\t\t\t\t<section className=\"flex flex-wrap w-1/2 pl-4 mb-4 border-l-8 border-blue-400\">\r\n\t\t\t\t\t\t<label className=\"w-full\">Export Transcript</label>\r\n\t\t\t\t\t\t<ExportFormatSelect\r\n\t\t\t\t\t\t\tclassName=\"w-1/2 mr-2 border border-gray-500\"\r\n\t\t\t\t\t\t\tname={'exportFormat'}\r\n\t\t\t\t\t\t\tvalue={this.state.exportFormat}\r\n\t\t\t\t\t\t\thandleChange={this.handleExportFormatChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{this.state.transcriptData !== null ? (\r\n\t\t\t\t\t\t\t<button onClick={() => this.exportTranscript()} className=\"underline\">\r\n\t\t\t\t\t\t\t\tExport File\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<div>Nothing to export</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</section>\r\n\r\n\t\t\t\t\t<section className=\"flex flex-wrap w-1/2 pl-4 mb-4 border-l-8 border-blue-400\">\r\n\t\t\t\t\t\t<label className=\"mr-2\">Transcript Title (Optional)</label>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tclassName=\"p-1 border border-gray-500\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tvalue={this.state.title}\r\n\t\t\t\t\t\t\tonChange={(e) => this.handleChangeTranscriptTitle(e.target.value)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</section>\r\n\r\n\t\t\t\t\t<section className=\"flex flex-wrap px-4 border-l-8 border-blue-200\">\r\n\t\t\t\t\t\t<label className=\"w-full text-xl\">Options</label>\r\n\r\n\t\t\t\t\t\t<div className=\"mr-4\">\r\n\t\t\t\t\t\t\t<label className=\"mr-2\" htmlFor={'textIsEditableCheckbox'}>\r\n\t\t\t\t\t\t\t\tText Is Editable\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tid={'textIsEditableCheckbox'}\r\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t\t\tchecked={this.state.isTextEditable}\r\n\t\t\t\t\t\t\t\tonChange={this.handleIsTextEditable}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className=\"mr-4\">\r\n\t\t\t\t\t\t\t<label className=\"mr-2\" htmlFor={'spellCheckCheckbox'}>\r\n\t\t\t\t\t\t\t\tSpell Check\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tid={'spellCheckCheckbox'}\r\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t\t\tchecked={this.state.spellCheck}\r\n\t\t\t\t\t\t\t\tonChange={this.handleSpellCheck}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<button onClick={() => this.clearLocalStorage()}>Clear Local Storage</button>\r\n\t\t\t\t\t</section>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<TranscriptEditor\r\n\t\t\t\t\ttranscriptData={this.state.transcriptData}\r\n\t\t\t\t\tfileName={this.state.fileName}\r\n\t\t\t\t\tmediaUrl={this.state.mediaUrl}\r\n\t\t\t\t\tisEditable={this.state.isTextEditable}\r\n\t\t\t\t\tspellCheck={this.state.spellCheck}\r\n\t\t\t\t\tsttJsonType={this.state.sttType}\r\n\t\t\t\t\thandleAnalyticsEvents={this.handleAnalyticsEvents}\r\n\t\t\t\t\ttitle={this.state.title}\r\n\t\t\t\t\tref={this.transcriptEditorRef}\r\n\t\t\t\t\thandleAutoSaveChanges={this.handleAutoSaveChanges}\r\n\t\t\t\t\tautoSaveContentType={this.state.autoSaveContentType}\r\n\t\t\t\t\tmediaType={'audio'}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<section style={{ height: '250px', width: '50%', float: 'left' }}>\r\n\t\t\t\t\t<h3>Components Analytics</h3>\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tstyle={{ height: '100%', width: '100%' }}\r\n\t\t\t\t\t\tvalue={JSON.stringify(this.state.analyticsEvents, null, 2)}\r\n\t\t\t\t\t\tdisabled\r\n\t\t\t\t\t/>\r\n\t\t\t\t</section>\r\n\r\n\t\t\t\t<section style={{ height: '250px', width: '50%', float: 'right' }}>\r\n\t\t\t\t\t<h3>\r\n\t\t\t\t\t\tAuto Save data:{' '}\r\n\t\t\t\t\t\t<code>\r\n\t\t\t\t\t\t\t{this.state.autoSaveContentType}| {this.state.autoSaveExtension}\r\n\t\t\t\t\t\t</code>\r\n\t\t\t\t\t</h3>\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tstyle={{ height: '100%', width: '100%' }}\r\n\t\t\t\t\t\tvalue={\r\n\t\t\t\t\t\t\tthis.state.autoSaveExtension === 'json' ? (\r\n\t\t\t\t\t\t\t\tJSON.stringify(this.state.autoSaveData, null, 2)\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\tthis.state.autoSaveData\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdisabled\r\n\t\t\t\t\t/>\r\n\t\t\t\t</section>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\nexport default Transcribe\r\n","const localSave = (mediaUrl, fileName, data) => {\r\n  let mediaUrlName = mediaUrl;\r\n  // if using local media instead of using random blob name\r\n  // that makes it impossible to retrieve from on page refresh\r\n  // use file name\r\n  if (mediaUrlName.includes('blob')) {\r\n    mediaUrlName = fileName;\r\n  }\r\n\r\n  localStorage.setItem(`draftJs-${ mediaUrlName }`, JSON.stringify(data));\r\n};\r\n\r\n// eslint-disable-next-line class-methods-use-this\r\nconst isPresentInLocalStorage = (mediaUrl, fileName) => {\r\n  if (mediaUrl !== null) {\r\n    let mediaUrlName = mediaUrl;\r\n    if (mediaUrl.includes('blob')) {\r\n      mediaUrlName = fileName;\r\n    }\r\n\r\n    const data = localStorage.getItem(`draftJs-${ mediaUrlName }`);\r\n    if (data !== null) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst loadLocalSavedData = (mediaUrl, fileName) => {\r\n  let mediaUrlName = mediaUrl;\r\n  if (mediaUrl.includes('blob')) {\r\n    mediaUrlName = fileName;\r\n  }\r\n  const data = JSON.parse(localStorage.getItem(`draftJs-${ mediaUrlName }`));\r\n  return data;\r\n};\r\n\r\nexport { loadLocalSavedData, isPresentInLocalStorage, localSave };"],"sourceRoot":""}